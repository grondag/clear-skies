// VRAM STANDARD GRADLE BUILD FOR FABRIC 1.17
// DO NOT MAKE CHANGES HERE - THEY WILL BE OVERWRITTEN BY AUTOMATED UPDATE

buildscript {
	dependencies {
		classpath 'org.kohsuke:github-api:1.135'
	}
}

plugins {
	id 'fabric-loom' version '0.10.63'
	id 'maven-publish'
	id 'org.cadixdev.licenser' version '0.6.1'
	id 'org.ajoberstar.grgit' version '4.1.1'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'checkstyle'
	id 'com.modrinth.minotaur' version '1.2.1'
}

ext.mc_tag = 'mc117'
ext.minecraft_version = '1.17.1'
ext.release_version = '1.17.1'
ext.loader_version = '0.12.11'
ext.fabric_version = '0.44.0+1.17'

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

repositories {
	mavenLocal()
	maven {url "https://maven.vram.io"}
	maven {url "https://maven.shedaniel.me/"}
	maven {url "https://maven.terraformersmc.com/releases/"}
}

project.archivesBaseName = project.mod_name + "-fabric-" + project.mc_tag

if (project.hasProperty('mod_version') && grgit != null) {
	if(grgit.status().isClean()) {
		project.version = project.getProperty('mod_version') + '.' + grgit.log().size()
	} else {
		project.version = project.getProperty('mod_version') + '.' + (grgit.log().size() + 1) + '-SNAPSHOT'
	}
} else {
	project.version = '99.0.0-LOCAL'
}

println "Building: ${group}:${project.archivesBaseName}:${project.version}"

if (!project.hasProperty('license_file')) {
	ext.license_file = '../HEADER'
}

if (!project.hasProperty('checkstyle_config')) {
	ext.checkstyle_config = '../checkstyle.xml'
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings loom.officialMojangMappings()
}


// Hat tip to JellySquid
configurations {
    modIncludeImplementation
    modImplementation.extendsFrom modIncludeImplementation
    include.extendsFrom modIncludeImplementation
}

loom {
	mixin.defaultRefmapName = project.mod_name + "-refmap.json"

	if (project.hasProperty('accesswidener')) {
		accessWidenerPath = file(project.getProperty('accesswidener'))
	}
}

tasks.withType(JavaCompile) {
	it.options.encoding = "UTF-8"
	it.options.release = 16
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// We define this outside of the eclipse block because eclipse has it's own "project" instance
def eclipseName = project.mod_name + " fabric " + project.minecraft_version

eclipse {
	project {
		name = eclipseName
	}
}

license {
	header rootProject.file(project.license_file)
	include '**/*.java'
}

checkstyle {
	configFile = rootProject.file(project.checkstyle_config)
	toolVersion = "8.44"
}

jar {
	from "LICENSE"
	manifest
	{
		attributes "Implementation-Title": "${project.archivesBaseName}"
		attributes "Implementation-Version": "${project.version}"
		attributes "Maven-Artifact": "${group}:${project.archivesBaseName}:${project.version}"
		attributes "Built-On-Minecraft": "${minecraft_version}"
		attributes "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
	}
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
	manifest
	{
		attributes "Implementation-Title": "${project.archivesBaseName}" + "-sources"
		attributes "Implementation-Version": "${project.version}"
		attributes "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:sources"
		attributes "Built-On-Minecraft": "${minecraft_version}"
		attributes "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
	}
}

task remapMavenJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: jar) {
	input = jar.archiveFile
	archiveFileName = "${archivesBaseName}-${project.version}-slim.jar"
	addNestedDependencies = false
	remapAccessWidener = true
}

build.dependsOn remapMavenJar

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = project.archivesBaseName;

			artifact(remapMavenJar) {
				builtBy remapMavenJar
			}

			artifact(remapJar) {
				classifier = "fat"
				builtBy remapJar
			}

			artifact(sourcesJar) {
				classifier = "sources"
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		mavenLocal()

		if (project.version.endsWith('LOCAL') || project.version.endsWith('SNAPSHOT')) {
			println "Snapshot build will be local only - not pushed to public maven"
		} else {
	    maven {
	        url = 'sftp://maven.vram.io:22'
	        credentials {
	        	if (project.hasProperty('maven_user')){
				username = project.getProperty('maven_user')
			}
			if (project.hasProperty('maven_password')){
				password = project.getProperty('maven_password')
			}
	        }
	    }
		}
	}
}

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

task github(dependsOn: build) {
	onlyIf {
		project.github_releases_token
	}

	doLast {
		if (project.version.endsWith('LOCAL') || project.version.endsWith('SNAPSHOT')) {
			println "Snapshot build will be local only - not pushed to github"
		} else {
			def github = GitHub.connectUsingOAuth(project.github_releases_token)
			def repository = github.getRepository("${project.github_repository_owner}/${project.github_repository}")

			def releaseBuilder = new GHReleaseBuilder(repository, version as String)
			releaseBuilder.name(project.minecraft_version + "-" + project.version)
			releaseBuilder.commitish(grgit.branch.current().name)

			def ghRelease = releaseBuilder.create()
			ghRelease.uploadAsset(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"), "application/java-archive");
			ghRelease.uploadAsset(file("${project.buildDir}/libs/${archivesBaseName}-${version}-sources.jar"), "application/java-archive");
		}
	}
}

curseforge {
	if(project.hasProperty("curseforge_api_key")) {
		apiKey = project.properties.curseforge_api_key
	}

	if(project.hasProperty("curseforge_id")) {
		project {
			id = project.properties.curseforge_id
			releaseType = project.release_type
			addGameVersion project.release_version
			addGameVersion "Fabric"
			changelog = "A changelog can be found at https://github.com/${github_repository_owner}/${github_repository}/commits"

			mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) {

				if(project.hasProperty("required_dep_slugs") || project.hasProperty("embedded_lib_slugs") || project.hasProperty("optional_dep_slugs") || project.hasProperty("compatible_tool_slugs") || project.hasProperty("incompatible_slugs")) {
					relations {
						if(project.hasProperty("required_dep_slugs")) {
							project.required_dep_slugs.split(", ").each { String slug ->
								requiredDependency slug
							}
						}

						if(project.hasProperty("embedded_lib_slugs")) {
							project.embedded_lib_slugs.split(", ").each { String slug ->
								embeddedLibrary slug
							}
						}

						if(project.hasProperty("optional_dep_slugs")) {
							project.optional_dep_slugs.split(", ").each { String slug ->
								optionalDependency slug
							}
						}

						if(project.hasProperty("compatible_tool_slugs")) {
							project.compatible_tool_slugs.split(", ").each { String slug ->
								tool slug
							}
						}

						if(project.hasProperty("incompatible_slugs")) {
							project.incompatible_slugs.split(", ").each { String slug ->
								incompatible slug
							}
						}
					}
				}
			}

			afterEvaluate {
				uploadTask.dependsOn remapJar
			}
		}

		options {
			forgeGradleIntegration = false
		}
	}
}

import com.modrinth.minotaur.TaskModrinthUpload

task publishModrinth (type: TaskModrinthUpload){ // Make sure it runs after build!
  if (project.hasProperty("modrinth_token") && project.hasProperty("modrinth_id")) {
		token = project.modrinth_token
		projectId = project.modrinth_id
		versionName = 'fabric-' + project.mc_tag + '-' + project.version
		versionNumber = 'fabric-' + project.mc_tag + '-' + project.version // Will fail if Modrinth has this version already
		versionType = project.release_type.toUpperCase()
		// On fabric, use 'remapJar' instead of 'jar'
		uploadFile = remapJar // This is the java jar task. If it can't find the jar, try 'jar.outputs.getFiles().asPath' in place of 'jar'
		addGameVersion(project.minecraft_version) // Call this multiple times to add multiple game versions. There are tools that can help you generate the list of versions
		addLoader('fabric')
	}
}

apply from: 'project.gradle'
